group GrainInterface;

property_decl(prop, type) ::= <<
<prop.type> <prop.getterName>();

<type.targetGrain.simpleName> <prop.witherName>(<prop.type> <prop.fieldName>);
>>

grain_interface(grain, type) ::= <<
/**
 * Composition of <type.targetSchema.simpleName> and Grain. See {@link <type.targetFactory>}.
 */
@<type.generated>("<type.grainGenerator.fullName>")
@<type.grainFactoryRef>(<type.targetFactory>.class)
public interface <type.targetGrain.simpleName> extends <type.targetSchema>, <type.grain> {

    <grain.properties:property_decl(type); separator="\n\n">

    <type.targetGrain.simpleName> with(<type.string> key, <type.object> value);

    <type.targetGrain.simpleName> withAll(<type.mapStringObjectWildcards> map);

    <type.targetGrain.simpleName> without(<type.object> key);

    <type.targetGrain.simpleName> withoutAll(<type.collectionWildcard> keys);

    <type.targetBuilder> builder();

    <type.constMap> extensions();
}

>>
