group FactoryEnum;

typeToken_decl(typeToken, type) ::= <<
private static final <type.typeToken>\<<typeToken.type>\> <typeToken.name> =
    new <type.typeToken>\<<typeToken.type>\>(){};

>>

checker_decl(typeToken, type) ::= <<
private static final <type.castFunction>\<<typeToken.castFunction.type>\> <typeToken.castFunction.name> =
    $STRATEGY.newCastFunction(<typeToken.name>);

>>

grain_prop(prop, type) ::= <<
new <type.simpleGrainProperty>(<\\>
    "<prop.name>", <\\>
    <if(prop.typeToken)><prop.typeToken.name>.asType()<else><prop.type>.class<endif><\\>
    <prop.flags:{flag|, <flag>}>)
>>

factory_enum(grain, type) ::= <<
/**
 * Factory for constructing Grain instances of <type.targetSchema>.
 */
// @<type.generated>("<type.grainGenerator.fullName>")
public enum <type.targetFactory.simpleName> implements <type.grainFactory> {
    INSTANCE;

    private static final <type.immutabilityStrategy> $STRATEGY = <grain.strategy>;

    <grain.typeTokens:typeToken_decl(type)>
    private static final <type.basisPropertyMap> $PROPERTIES = <type.grainTools>.asPropertyMap(
        <grain.properties:grain_prop(type); separator=",\n">);

    private static final <type.string>[] $KEYS = $PROPERTIES.keySet().toArray(new <type.string>[<length(grain.properties)>]);
    private static final <type.targetGrain> $DEFAULT = builder().build();
    public static <type.targetGrain> DEFAULT() { return $DEFAULT; }
    public static <type.targetBuilder> builder() { return new <type.targetBuilderImpl.simpleName>(); }

    public <type.basisPropertyMap> getBasisProperties() { return $PROPERTIES; }
    public <type.targetGrain> getDefault() { return DEFAULT(); }
    public <type.targetBuilder> newBuilder() { return builder(); }
    public <type.string> toString() { return getClass().getName(); }

    <grain.typeTokens:checker_decl(type)>
    <grain_impl(grain, type)>

    <serialization_proxy_impl(grain, type)>

    <builder_impl(grain, type)>
}

>>
